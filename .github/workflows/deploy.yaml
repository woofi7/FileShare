name: Build and Deploy FileShare

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  DOCKER_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/fileshare
  CONTAINER_NAME: fileshare

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
    - name: Restart Portainer Stack
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: |
        # Get stack ID
        STACK_ID=$(curl -s -H "X-API-Key: ${{ secrets.PORTAINER_API_TOKEN }}" \
          "${{ secrets.PORTAINER_URL }}/api/stacks" | \
          jq -r '.[] | select(.Name == "${{ secrets.PORTAINER_STACK_NAME }}") | .Id')
        
        if [ "$STACK_ID" != "null" ] && [ "$STACK_ID" != "" ]; then
          echo "Found stack ID: $STACK_ID"
        
          # Redeploy the stack
          curl -X POST \
            -H "X-API-Key: ${{ secrets.PORTAINER_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            "${{ secrets.PORTAINER_URL }}/api/stacks/$STACK_ID/redeploy" \
            -d '{
              "pullImage": true,
              "prune": false
            }'
        
          echo "Stack redeploy triggered"
        else
          echo "Stack not found: ${{ secrets.PORTAINER_STACK_NAME }}"
        fi
